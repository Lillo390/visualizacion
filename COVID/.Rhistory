df.confirmed.tidy <- tidy_df(df.confirmed.week, values_to = "confirmed")
df.death.tidy <- tidy_df(df.death.week, values_to = "death")
df.recovered.tidy <- tidy_df(df.recovered.week, values_to = "recovered")
df.confirmed_no_NAN <- df.confirmed.tidy[!is.na(df.confirmed.tidy$Lat) & !is.na(df.confirmed.tidy$Long),]
spdf.confirmed <-  SpatialPointsDataFrame(coords=df.confirmed_no_NAN[, c("Long", "Lat")], data=df.confirmed_no_NAN, proj4string = CRS(countries_sp@proj4string@projargs))
knitr::opts_chunk$set(echo = TRUE)
# Especificamos las librerías necesarias en esta lista
packages = c("maps","ggmap","leaflet","rgdal","rgeos","maptools","tidyverse","tmap","devtools","formatR","tmaptools","caret",'mapview','cartography','raster','rasterVis', "readr", "gifski", "tidyr")
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE,repos='http://cran.rediris.es')
library(x, character.only = TRUE)
}
})
confirmed <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
death <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
recovered <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"
df.confirmed <- read_csv(confirmed)
df.death <- read_csv(death)
df.recovered <- read_csv(recovered)
subsampling_week <- function(df){
cols <- c(c(1, 2, 3, 4), seq(from=5, to=ncol(df), by=7))
df.week <- df[, cols]
return(df.week)
}
df.confirmed.week <- subsampling_week(df.confirmed)
df.death.week <- subsampling_week(df.death)
df.recovered.week <- subsampling_week(df.recovered)
tidy_df <- function(df, values_to = "Value") {
df.tidy <- tidyr::pivot_longer(data = df, names_to = "Day", values_to = values_to, cols = colnames(df)[5:length(df)])
df.tidy$Day <- as.Date(x = df.tidy$Day, format = '%m/%d/%y')
return(df.tidy)
}
df.confirmed.tidy <- tidy_df(df.confirmed.week, values_to = "confirmed")
df.death.tidy <- tidy_df(df.death.week, values_to = "death")
df.recovered.tidy <- tidy_df(df.recovered.week, values_to = "recovered")
df.confirmed_no_NAN <- df.confirmed.tidy[!is.na(df.confirmed.tidy$Lat) & !is.na(df.confirmed.tidy$Long),]
spdf.confirmed <-  SpatialPointsDataFrame(coords=df.confirmed_no_NAN[, c("Long", "Lat")], data=df.confirmed_no_NAN, proj4string = CRS(countries_sp@proj4string@projargs))
## Global code options
knitr::opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
# Especificamos las librerías necesarias en esta lista
packages = c("maps","ggmap","leaflet","rgdal","rgeos","maptools","tidyverse","tmap","devtools","formatR","tmaptools","caret",'mapview','cartography','raster','rasterVis', "readr", "gifski", "tidyr")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE,repos='http://cran.rediris.es')
library(x, character.only = TRUE)
}
})
library(gifski)
library(readr)
library(ggmap)
library(rgdal)
library(rgeos)
library(maptools)
library(dplyr)
library(tidyr)
library(tmap)
library(geospatial)
library(sp)
library(maps)
library(raster)
library(tmaptools)
library(leaflet)
confirmed <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
death <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
recovered <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"
df.confirmed <- read_csv(confirmed)
df.death <- read_csv(death)
df.recovered <- read_csv(recovered)
by_week <- function(df){
cols <- c(1, 2, 3, 4)
cols <- c(cols, seq(from=5, to=ncol(df), by=7))
df.week <- df[, cols]
return(df.week)
}
df.confirmed.week <- by_week(df.confirmed)
df.death.week <- by_week(df.death)
df.recovered.week <- by_week(df.recovered)
tidy_df <- function(df, values_to="Value"){
df.tidy <- pivot_longer(data=df, names_to="Day", values_to=values_to, cols=colnames(df)[5:length(df)])
df.tidy$Day <- as.Date(x=df.tidy$Day, format = '%m/%d/%y')
return(df.tidy)
}
df.confirmed.tidy <- tidy_df(df.confirmed.week, values_to="confirmed")
df.confirmed.tidy['plot_confirmed'] <- 100 * df.confirmed.tidy$confirmed
df.death.tidy <- tidy_df(df.death.week, values_to="death")
df.recovered.tidy <- tidy_df(df.recovered.week, values_to="recovered")
df_to_spdf <- function(df){
dfwithoutNANs <- df[!is.na(df$Lat),]
dfwithoutNANs <- df[!is.na(df$Long),]
spdf <-  SpatialPointsDataFrame(coords=dfwithoutNANs[, c("Long", "Lat")], data=dfwithoutNANs, proj4string = CRS(countries_sp@proj4string@projargs))
return(spdf)
}
spdf.confirmed <- df_to_spdf(df.confirmed.tidy)
spdf.death <- df_to_spdf(df.death.tidy)
spdf.recovered <- df_to_spdf(df.recovered.tidy)
show_animated_map(spdf.confirmed, size="confirmed", filename="confirmed.gif")
library(tmap)
# Crear el mapa
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_fill(col = "confirmed", palette = "Reds") +
tm_facets(by = "Day", free.coords = FALSE, nrow = 1, ncol = 1)
# Generar la animación
tmap_animation(map, width = 1800, height = 900, fps = 4, outer.margins = 0, filename = "confirmed.gif")
## Global code options
knitr::opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
# Especificamos las librerías necesarias en esta lista
packages = c("maps","ggmap","leaflet","rgdal","rgeos","maptools","tidyverse","tmap","devtools","formatR","tmaptools","caret",'mapview','cartography','raster','rasterVis', "readr", "gifski", "tidyr")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE,repos='http://cran.rediris.es')
library(x, character.only = TRUE)
}
})
library(gifski)
library(readr)
library(ggmap)
library(rgdal)
library(rgeos)
library(maptools)
library(dplyr)
library(tidyr)
library(tmap)
library(geospatial)
library(sp)
library(maps)
library(raster)
library(tmaptools)
library(leaflet)
confirmed <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
death <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
recovered <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"
df.confirmed <- read_csv(confirmed)
df.death <- read_csv(death)
df.recovered <- read_csv(recovered)
by_week <- function(df){
cols <- c(1, 2, 3, 4)
cols <- c(cols, seq(from=5, to=ncol(df), by=7))
df.week <- df[, cols]
return(df.week)
}
df.confirmed.week <- by_week(df.confirmed)
df.death.week <- by_week(df.death)
df.recovered.week <- by_week(df.recovered)
tidy_df <- function(df, values_to="Value"){
df.tidy <- pivot_longer(data=df, names_to="Day", values_to=values_to, cols=colnames(df)[5:length(df)])
df.tidy$Day <- as.Date(x=df.tidy$Day, format = '%m/%d/%y')
return(df.tidy)
}
df.confirmed.tidy <- tidy_df(df.confirmed.week, values_to="confirmed")
df.death.tidy <- tidy_df(df.death.week, values_to="death")
df.recovered.tidy <- tidy_df(df.recovered.week, values_to="recovered")
df_to_spdf <- function(df){
dfwithoutNANs <- df[!is.na(df$Lat),]
dfwithoutNANs <- df[!is.na(df$Long),]
spdf <-  SpatialPointsDataFrame(coords=dfwithoutNANs[, c("Long", "Lat")], data=dfwithoutNANs, proj4string = CRS(countries_sp@proj4string@projargs))
return(spdf)
}
spdf.confirmed <- df_to_spdf(df.confirmed.tidy)
spdf.death <- df_to_spdf(df.death.tidy)
spdf.recovered <- df_to_spdf(df.recovered.tidy)
show_animated_map <- function(spdf, size, filename, col="red"){
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf) +
tm_bubbles(size=size, col=col) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = filename)
}
show_animated_map(spdf.confirmed, size="confirmed", filename="confirmed.gif")
# Especificamos las librerías necesarias en esta lista
packages = c("maps","ggmap","leaflet","sp","rgdal","rgeos","maptools","tidyverse","tmap","devtools","formatR","tmaptools","caret",'mapview','cartography','raster','rasterVis', "readr", "gifski", "tidyr",'geospatial')
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE,repos='http://cran.rediris.es')
library(x, character.only = TRUE)
}
})
confirmed <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
death <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
recovered <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"
df.confirmed <- read_csv(confirmed)
df.death <- read_csv(death)
df.recovered <- read_csv(recovered)
by_week <- function(df){
cols <- c(1, 2, 3, 4)
cols <- c(cols, seq(from=5, to=ncol(df), by=7))
df.week <- df[, cols]
return(df.week)
}
df.confirmed.week <- by_week(df.confirmed)
df.death.week <- by_week(df.death)
df.recovered.week <- by_week(df.recovered)
tidy_df <- function(df, values_to="Value"){
df.tidy <- pivot_longer(data=df, names_to="Day", values_to=values_to, cols=colnames(df)[5:length(df)])
df.tidy$Day <- as.Date(x=df.tidy$Day, format = '%m/%d/%y')
return(df.tidy)
}
df.confirmed.tidy <- tidy_df(df.confirmed.week, values_to="confirmed")
df.death.tidy <- tidy_df(df.death.week, values_to="death")
df.recovered.tidy <- tidy_df(df.recovered.week, values_to="recovered")
df_to_spdf <- function(df){
dfwithoutNANs <- df[!is.na(df$Lat),]
dfwithoutNANs <- df[!is.na(df$Long),]
spdf <-  SpatialPointsDataFrame(coords=dfwithoutNANs[, c("Long", "Lat")], data=dfwithoutNANs, proj4string = CRS(countries_sp@proj4string@projargs))
return(spdf)
}
spdf.confirmed <- df_to_spdf(df.confirmed.tidy)
spdf.death <- df_to_spdf(df.death.tidy)
spdf.recovered <- df_to_spdf(df.recovered.tidy)
show_animated_map <- function(spdf, size, filename, col="red"){
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf) +
tm_bubbles(size=size, col=col) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = filename)
}
show_animated_map(spdf.confirmed, size="confirmed", filename="confirmed.gif")
# Especificamos las librerías necesarias en esta lista
packages = c("maps","ggmap","leaflet","sp","rgdal","rgeos","maptools","tidyverse","tmap","devtools","formatR","tmaptools","caret",'mapview','cartography','raster','rasterVis', "readr", "gifski", "tidyr",'geospatial')
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE,repos='http://cran.rediris.es')
library(x, character.only = TRUE)
}
})
confirmed <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
death <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
recovered <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"
df.confirmed <- read_csv(confirmed)
df.death <- read_csv(death)
df.recovered <- read_csv(recovered)
subsampling_week <- function(df){
cols <- c(c(1, 2, 3, 4), seq(from=5, to=ncol(df), by=7))
df.week <- df[, cols]
return(df.week)
}
df.confirmed.week <- subsampling_week(df.confirmed)
df.death.week <- subsampling_week(df.death)
df.recovered.week <- subsampling_week(df.recovered)
tidy_df <- function(df, values_to = "Value") {
df.tidy <- tidyr::pivot_longer(data = df, names_to = "Day", values_to = values_to, cols = colnames(df)[5:length(df)])
df.tidy$Day <- as.Date(x = df.tidy$Day, format = '%m/%d/%y')
return(df.tidy)
}
df.confirmed.tidy <- tidy_df(df.confirmed.week, values_to = "confirmed")
df.death.tidy <- tidy_df(df.death.week, values_to = "death")
df.recovered.tidy <- tidy_df(df.recovered.week, values_to = "recovered")
df.confirmed_no_NAN <- df.confirmed.tidy[!is.na(df.confirmed.tidy$Lat) & !is.na(df.confirmed.tidy$Long),]
spdf.confirmed <-  SpatialPointsDataFrame(coords=df.confirmed_no_NAN[, c("Long", "Lat")], data=df.confirmed_no_NAN, proj4string = CRS(countries_sp@proj4string@projargs))
df.death_no_NAN <- df.death.tidy[!is.na(df.death.tidy$Lat) & !is.na(df.death.tidy$Long),]
spdf.death <-  SpatialPointsDataFrame(coords=df.death_no_NAN[, c("Long", "Lat")], data=df.death_no_NAN, proj4string = CRS(countries_sp@proj4string@projargs))
df.recovered_no_NAN <- df.recovered.tidy[!is.na(df.recovered.tidy$Lat) & !is.na(df.recovered.tidy$Long),]
spdf.recovered <-  SpatialPointsDataFrame(coords=df.recovered_no_NAN[, c("Long", "Lat")], data=df.recovered_no_NAN, proj4string = CRS(countries_sp@proj4string@projargs))
show_animated_map(spdf.confirmed, size="confirmed", filename="confirmed.gif")
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.confirmed) +
tm_bubbles(size="confirmed", col='red') +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'confirmed.gif')
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.confirmed) +
tm_bubbles(size="confirmed", col='red',scale = 300) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'confirmed.gif')
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.confirmed) +
tm_bubbles(size="confirmed", col='red',scale = 30) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'confirmed.gif')
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.confirmed) +
tm_bubbles(size="confirmed", col='red',scale = 3,alpha = 'confirmed') +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'confirmed.gif')
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.confirmed) +
tm_bubbles(size="confirmed", col='red',scale = 3,alpha = 0.5) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'confirmed.gif')
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.confirmed) +
tm_bubbles(size="confirmed", col='red',scale = 6,alpha = 0.5) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'confirmed.gif')
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.confirmed) +
tm_bubbles(size="confirmed", col='red',scale = 8,alpha = 0.3) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'confirmed.gif')
library(tmap)
# Crear el mapa
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_fill(col = "confirmed", palette = "Reds", style = "quantile") +
tm_facets(by = "Day", free.coords = FALSE, nrow = 1, ncol = 1)
# Generar la animación
tmap_animation(map, width = 1800, height = 900, fps = 4, outer.margins = 0, filename = "confirmed.gif")
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.confirmed) +
tm_bubbles(size="confirmed", col='red',scale = 8,alpha = 0.3) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'confirmed.gif')
library(tmap)
# Crear el mapa
map <- tm_shape(countries_sp) + tm_shape(spdf.confirmed)+
tm_borders(col = "black") +
tm_fill(col = "confirmed", palette = "Reds", style = "quantile") +
tm_facets(by = "Day", free.coords = FALSE, nrow = 1, ncol = 1)
# Generar la animación
tmap_animation(map, width = 1800, height = 900, fps = 4, outer.margins = 0, filename = "confirmed.gif")
library(tmap)
# Crear el mapa
map <- tm_shape(countries_sp) + tm_borders(col = "black")+ tm_shape(spdf.confirmed)+
tm_fill(col = "confirmed", palette = "Reds", style = "quantile") +
tm_facets(by = "Day", free.coords = FALSE, nrow = 1, ncol = 1)
# Generar la animación
tmap_animation(map, width = 1800, height = 900, fps = 4, outer.margins = 0, filename = "confirmed.gif")
library(tmap)
# Crear el mapa
map <- tm_shape(countries_sp)+tm_fill(col = "confirmed", palette = "Reds", style = "quantile") + tm_borders(col = "black")+ tm_shape(spdf.confirmed)+
tm_facets(by = "Day", free.coords = FALSE, nrow = 1, ncol = 1)
# Generar la animación
tmap_animation(map, width = 1800, height = 900, fps = 4, outer.margins = 0, filename = "confirmed.gif")
library(tmap)
# Crear el mapa
map <- tm_shape(countries_sp)+tm_borders(col = "black")+ tm_shape(spdf.confirmed)+tm_fill(col = "confirmed", palette = "Reds", style = "quantile") +
tm_facets(by = "Day", free.coords = FALSE, nrow = 1, ncol = 1)
# Generar la animación
tmap_animation(map, width = 1800, height = 900, fps = 4, outer.margins = 0, filename = "confirmed.gif")
knitr::opts_chunk$set(echo = TRUE)
# Especificamos las librerías necesarias en esta lista
packages = c("maps","ggmap","leaflet","sp","rgdal","rgeos","maptools","tidyverse","tmap","devtools","formatR","tmaptools","caret",'mapview','cartography','raster','rasterVis', "readr", "gifski", "tidyr",'geospatial')
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE,repos='http://cran.rediris.es')
library(x, character.only = TRUE)
}
})
confirmed <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
death <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
recovered <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"
df.confirmed <- read_csv(confirmed)
df.death <- read_csv(death)
df.recovered <- read_csv(recovered)
subsampling_week <- function(df){
cols <- c(c(1, 2, 3, 4), seq(from=5, to=ncol(df), by=7))
df.week <- df[, cols]
return(df.week)
}
df.confirmed.week <- subsampling_week(df.confirmed)
df.death.week <- subsampling_week(df.death)
df.recovered.week <- subsampling_week(df.recovered)
tidy_df <- function(df, values_to = "Value") {
df.tidy <- tidyr::pivot_longer(data = df, names_to = "Day", values_to = values_to, cols = colnames(df)[5:length(df)])
df.tidy$Day <- as.Date(x = df.tidy$Day, format = '%m/%d/%y')
return(df.tidy)
}
df.confirmed.tidy <- tidy_df(df.confirmed.week, values_to = "confirmed")
df.death.tidy <- tidy_df(df.death.week, values_to = "death")
df.recovered.tidy <- tidy_df(df.recovered.week, values_to = "recovered")
df.confirmed_no_NAN <- df.confirmed.tidy[!is.na(df.confirmed.tidy$Lat) & !is.na(df.confirmed.tidy$Long),]
spdf.confirmed <-  SpatialPointsDataFrame(coords=df.confirmed_no_NAN[, c("Long", "Lat")], data=df.confirmed_no_NAN, proj4string = CRS(countries_sp@proj4string@projargs))
df.death_no_NAN <- df.death.tidy[!is.na(df.death.tidy$Lat) & !is.na(df.death.tidy$Long),]
spdf.death <-  SpatialPointsDataFrame(coords=df.death_no_NAN[, c("Long", "Lat")], data=df.death_no_NAN, proj4string = CRS(countries_sp@proj4string@projargs))
df.recovered_no_NAN <- df.recovered.tidy[!is.na(df.recovered.tidy$Lat) & !is.na(df.recovered.tidy$Long),]
spdf.recovered <-  SpatialPointsDataFrame(coords=df.recovered_no_NAN[, c("Long", "Lat")], data=df.recovered_no_NAN, proj4string = CRS(countries_sp@proj4string@projargs))
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.confirmed) +
tm_bubbles(size="confirmed", col='red',scale = 8,alpha = 0.3) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'confirmed.gif')
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.confirmed) +
tm_bubbles(size="confirmed", col='red',scale = 8,alpha = 0.3) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'confirmed.gif')
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.death) +
tm_bubbles(size="death", col='gray',scale = 8,alpha = 0.3) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'death.gif')
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.recovered) +
tm_bubbles(size="recovered", col='red',scale = 8,alpha = 0.3) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'recovered.gif')
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.recovered) +
tm_bubbles(size="recovered", col='green',scale = 8,alpha = 0.3) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'recovered.gif')
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.death) +
tm_bubbles(size="death", col='purple',scale = 8,alpha = 0.3) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'death.gif')
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.recovered) +
tm_bubbles(size="recovered", col='green',scale = 1,alpha = 0.3) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'recovered.gif')
show_animated_map(spdf.recovered, size="recovered", filename= "recovered.gif", col="green")
show_animated_map <- function(spdf, size, filename, col="red"){
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf) +
tm_bubbles(size=size, col=col) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = filename)
}
show_animated_map(spdf.recovered, size="recovered", filename= "recovered.gif", col="green")
# Especificamos las librerías necesarias en esta lista
packages = c("maps","ggmap","leaflet","sp","rgdal","rgeos","maptools","tidyverse","tmap","devtools","formatR","tmaptools","caret",'mapview','cartography','raster','rasterVis', "readr", "gifski", "tidyr",'geospatial')
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE,repos='http://cran.rediris.es')
library(x, character.only = TRUE)
}
})
confirmed <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
death <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
recovered <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"
df.confirmed <- read_csv(confirmed)
df.death <- read_csv(death)
df.recovered <- read_csv(recovered)
subsampling_week <- function(df){
cols <- c(c(1, 2, 3, 4), seq(from=5, to=ncol(df), by=7))
df.week <- df[, cols]
return(df.week)
}
df.confirmed.week <- subsampling_week(df.confirmed)
df.death.week <- subsampling_week(df.death)
df.recovered.week <- subsampling_week(df.recovered)
data_tidy <- function(data, values = "Value") {
data_tidy <- tidyr::pivot_longer(data = data, names_to = "Day", values_to = values, cols = colnames(data)[5:length(data)])
data_tidy$Day <- as.Date(x = data_tidy$Day, format = '%m/%d/%y')
return(data_tidy)
}
df.confirmed.tidy <- data_tidy(df.confirmed.week, values_to = "confirmed")
data_tidy <- function(data, values = "Value") {
data_tidy <- tidyr::pivot_longer(data = data, names_to = "Day", values_to = values, cols = colnames(data)[5:length(data)])
data_tidy$Day <- as.Date(x = data_tidy$Day, format = '%m/%d/%y')
return(data_tidy)
}
df.confirmed.tidy <- data_tidy(df.confirmed.week, values= "confirmed")
df.death.tidy <- data_tidy(df.death.week, values= "death")
df.recovered.tidy <- data_tidy(df.recovered.week, values= "recovered")
df.confirmed_no_NAN <- df.confirmed.tidy[!is.na(df.confirmed.tidy$Lat) & !is.na(df.confirmed.tidy$Long),]
spdf.confirmed <-  SpatialPointsDataFrame(coords=df.confirmed_no_NAN[, c("Long", "Lat")], data=df.confirmed_no_NAN, proj4string = CRS(countries_sp@proj4string@projargs))
df.death_no_NAN <- df.death.tidy[!is.na(df.death.tidy$Lat) & !is.na(df.death.tidy$Long),]
spdf.death <-  SpatialPointsDataFrame(coords=df.death_no_NAN[, c("Long", "Lat")], data=df.death_no_NAN, proj4string = CRS(countries_sp@proj4string@projargs))
df.recovered_no_NAN <- df.recovered.tidy[!is.na(df.recovered.tidy$Lat) & !is.na(df.recovered.tidy$Long),]
spdf.recovered <-  SpatialPointsDataFrame(coords=df.recovered_no_NAN[, c("Long", "Lat")], data=df.recovered_no_NAN, proj4string = CRS(countries_sp@proj4string@projargs))
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.confirmed) +
tm_bubbles(size="confirmed", col='red',scale = 8,alpha = 0.3) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'confirmed.gif')
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.death) +
tm_bubbles(size="death", col='purple',scale = 8,alpha = 0.3) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'death.gif')
map <- tm_shape(countries_sp) +
tm_borders(col = "black") +
tm_shape(spdf.recovered) +
tm_bubbles(size="recovered", col='green',scale = 8,alpha = 0.3) +
tm_facets(by="Day", free.coords = F, nrow = 1, ncol = 1)
tmap_animation(map, width=1800, height = 900, fps = 4, outer.margins = 0, filename = 'recovered.gif')
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
