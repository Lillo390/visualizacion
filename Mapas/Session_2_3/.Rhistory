library(maptools)
library(dplyr)
library(tidyr)
library(tmap)
library(geospatial) # Instalado en ejercicios anteriores
library(sp)
library(maps)
library(raster)
library(tmaptools)
library(leaflet)
library(cartography)
px <- c(5, 7, 8, 9, 8, 7, 6)
py <- c(7, 3, 4, 8, 9, 13, 8)
plot(px,py)
polygon(px, py, col = "khaki1")  # polígono dados los vértices
points(c(6, 6, 8, 8.5), c(9, 4, 8, 9), pch=20, col = "peachpuff4", lwd = 3)
lines(c(5, 6, 7, 8), c(5,8 ,8, 11), col = "steelblue1",  lwd = 3) # línea que une los puntos por orden
lines(c(9, 3), c(4, 12.8), col = "dark green", lwd = 3)
ln <- Line(matrix(runif(6), ncol=2)) # ha de tener dos columnas
str(ln)
ln@coords
lns <- Lines(list(ln), ID = "a") # lista que solo contiene una línea!
str(lns)
lns@Lines
lns@ID
# just 9 points on a grid:
x <- c(1,1,1,2,2,2,3,3,3)
y <- c(1,2,3,1,2,3,1,2,3)
xy <- cbind(x,y)
S <- SpatialPoints(xy)
str(S)
plot(S)
l1 = cbind(c(1,2,3),c(3,2,2)) # vertices de primera linea
l1a = cbind(l1[,1]+.05,l1[,2]+.05) # vertices de segunda linea
l2 = cbind(c(1,2,3),c(1,1.5,1)) # vertices de tercera linea
Sl1 = Line(l1)
Sl1a = Line(l1a)
Sl2 = Line(l2)
S1 = Lines(list(Sl1, Sl1a), ID="a")
S2 = Lines(list(Sl2), ID="b")
Sl = SpatialLines(list(S1,S2))
summary(Sl)
plot(Sl, col = c("red", "blue"))
#Escribo todo el código
# dogs<-read_csv('https://data.austintexas.gov/api/views/ykw4-j3aj/rows.csv?accessType=DOWNLOAD')  #YA NO FUNCIONA EL ENLACE
dogs <- read_csv("./data/Declared__Dangerous_Dogs.csv")
#Escribo todo el código
# dogs<-read_csv('https://data.austintexas.gov/api/views/ykw4-j3aj/rows.csv?accessType=DOWNLOAD')  #YA NO FUNCIONA EL ENLACE
dogs <- read_csv("./data/Declared__Dangerous_Dogs.csv")
head(dogs) # Vemos que podemos extraer las coordenadas de la columna 'Location'
dogs_coords<-separate(dogs, Location, into = c('a','b'),sep = '\\(')%>%
separate(b, into=c('c','d'),sep='\\)')%>%
separate(c,into=c('lat','lon'),sep=',')%>%
dplyr::select(lon,lat)%>%
sapply(.,as.numeric)%>%
as.data.frame
dogs<-dplyr::mutate(dogs,lonN=dogs_coords$lon,latN=dogs_coords$lat)
dogs<-dplyr::mutate(dogs,lonN=dogs_coords$lon,latN=dogs_coords$lat) %>% as.data.frame()
head(dogs) # hemos de tener las coordenadas como columnas independientes
spdfDogs<-dogs[complete.cases(dogs),]
coordinates(spdfDogs)<- ~lonN+latN # o también: c('lonN','latN')
str(spdfDogs,max.level = 2)
dogs <- read_csv("./data/Declared__Dangerous_Dogs.csv")
head(dogs) # Vemos que podemos extraer las coordenadas de la columna 'Location'
dogs_coords<-separate(dogs, Location, into = c('a','b'),sep = '\\(')%>%
separate(b, into=c('c','d'),sep='\\)')%>%
separate(c,into=c('lat','lon'),sep=',')%>%
dplyr::select(lon,lat)%>%
sapply(.,as.numeric)%>%
as.data.frame
dogs <- read_csv("./data/Declared__Dangerous_Dogs.csv")
head(dogs) # Vemos que podemos extraer las coordenadas de la columna 'Location'
dogs_coords<-separate(dogs, Location, into = c('a','b'),sep = '\\(')%>%
separate(b, into=c('c','d'),sep='\\)')%>%
separate(c,into=c('lat','lon'),sep=',')%>%
dplyr::select(lon,lat)%>%
sapply(.,as.numeric)%>%
as.data.frame
dogs<-dplyr::mutate(dogs,lonN=dogs_coords$lon,latN=dogs_coords$lat)
dogs<-dplyr::mutate(dogs,lonN=dogs_coords$lon,latN=dogs_coords$lat) %>% as.data.frame()
head(dogs) # hemos de tener las coordenadas como columnas independientes
if(!suppressWarnings(require('geospatial')))
{devtools::install_github("cwickham/geospatial")} # La instalación no se realiza desde cran sino desde esta ubicación
library(geospatial)
str(countries_sp,max.level=2)
str(countries_sp[177,])
countries_sp@bbox
library(maps)
data(canada.cities)
head(canada.cities)
class(canada.cities)
coordinates(canada.cities)<-~lon+lat
## Global code options
knitr::opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
# Especificamos las librerías necesarias en esta lista
packages = c("maps","ggmap","leaflet","rgdal","rgeos","maptools","tidyverse","tmap","devtools","formatR","tmaptools","caret",'mapview','cartography')
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE,repos='http://cran.rediris.es')
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
library(ggmap)
library(rgdal)
library(rgeos)
library(maptools)
library(dplyr)
library(tidyr)
library(tmap)
library(geospatial) # Instalado en ejercicios anteriores
library(sp)
library(maps)
library(raster)
library(tmaptools)
library(leaflet)
library(cartography)
tmap_mode("plot")
data(World)
tm_shape(World) +
tm_polygons("HPI") # Happy Planet Index
tmap_mode("view")
data(World)
#World<-as(World,'Spatial') # No necesario, acepta objetos sp y sf
tm_shape(World) +
tm_polygons("HPI", id = "iso_a3", popup.vars = TRUE)
library(tmap)
data(World, rivers, metro)
str(World)
str(rivers)
str(metro)
World<-as(World, 'Spatial')  # convierte de sf a sp
rivers<-as(rivers, 'Spatial')
metro<-as(metro, 'Spatial')
str(World,max.level = 2)
str(World@data) # Para formato sp, si mantenemos el formato sf, se accede directamente a la variable como en un dataframe normal
#gdp_md: producto interior bruto
#gdp_cap: per capita
#HPI: Happy Planet Index (Grado de felicidad)
# solo el mapa
qtm(shp=World) # shp: mapa. Cambiar por  metro, rivers...
# solo el mapa
qtm(shp=metro) # shp: mapa. Cambiar por  metro, rivers...
# solo el mapa
qtm(shp=rivers) # shp: mapa. Cambiar por  metro, rivers...
# solo el mapa
qtm(shp=world) # shp: mapa. Cambiar por  metro, rivers...
# solo el mapa
qtm(shp=World) # shp: mapa. Cambiar por  metro, rivers...
qtm(World[World$name=='Spain'])
tmap_mode('View')
tmap_mode('View')
tmap_mode('view')
qtm(World[World$name=='spain',])
qtm(World[World$name=='Spain',])
# choropleth
qtm(World, fill = "economy", format="World", style="col_blind")
tmap_mode('view')
qtm(World, fill="HPI", fill.n=9, fill.palette="div", fill.auto.palette.mapping=FALSE,
fill.title="Happy Planet Index", fill.id="name", format="World", style="gray")
qtm(World, fill="area", fill.n=9, fill.palette="div", fill.auto.palette.mapping=TRUE,
fill.title="Area", fill.id="area", format="World", style="gray")
qtm(World, borders = NULL) +
qtm(metro, symbols.size = "pop2010",
symbols.title.size= "Metropolitan Areas",
symbols.id= "name",
format = "World")
library(sp)
library(tmap)
library(geospatial)
str(countries_spdf,max.level = 2)
str(countries_spdf@data)
p<-tm_shape(countries_spdf)
p<-p+tm_fill(col = "population", style="quantile") # consulta en qué consiste el estilo "quantile"
show(p)
tm_shape(countries_spdf) + tm_fill(col = "population",style="quantile")
data(World)
Europe<-World[World$continent=='Europe',]
tmap_mode('plot') # en modo view no funciona el escalado de las etiquetas
tm_shape(Europe) +
tm_polygons("well_being", textNA="Non-European countries", title="Well-Being Index") +
tm_text("iso_a3", size="AREA", root=5) +
tm_format("World") +
tm_style("grey")
# Cargamos los datos (con conjuntos incluidos en las librerías)
#data(package='tmap')
data(land, rivers, metro)  # land cover, rivers, metropolitan areas
# land es de tipo raster (stars-raster), las otras dos son de tipo sf
# Transformamos SF en SP
rivers<-as(rivers,'Spatial')
metro<-as(metro, 'Spatial')
# Salvo para usar estos códigos no es necesario pasar a tipo sp
str(land,max.level = 2)
##str(land@data)
str(rivers,max.level = 2)
str(rivers@data)
str(metro,max.level = 2)
str(metro@data)
tmap_mode('plot')
tm_shape(land) +
tm_raster("trees", breaks=seq(0, 100, by=20), legend.show = FALSE) +
tm_shape(Europe, is.master = TRUE) +
tm_borders() +
tm_shape(rivers) +
tm_lines(lwd="strokelwd", scale=5, legend.lwd.show = FALSE) +
tm_shape(metro) +
tm_bubbles("pop2010", "red", border.col = "black", border.lwd=1,
size.lim = c(0, 11e6), sizes.legend = c(1e6, 2e6, 4e6, 6e6, 10e6),
title.size="Metropolitan Population") +
tm_text("name", size="pop2010", scale=1, root=4, size.lowerbound = .6,
bg.color="white", bg.alpha = .75,
auto.placement = 1, legend.size.show = FALSE) +
tm_format("World") +
tm_style("natural")
# capa de land cover con una capa raster de porcentaje de superficie cubierta por árboles (gradiente de color dado por breaks)
p<-tm_shape(land) +
tm_raster("trees", breaks=seq(0, 100, by=20), legend.show = FALSE)
show(p)
# Añadir capa de datos de Europa y definirlo como capa maestra, mostrar sus fronteras
p<-tm_shape(land) +
tm_raster("trees", breaks=seq(0, 100, by=20), legend.show = FALSE) +
tm_shape(Europe, is.master = TRUE) +
tm_borders()
show(p)
# Añadir capa de ríos, escalados por su caudal
tm_shape(land) +
tm_raster("trees", breaks=seq(0, 100, by=20), legend.show = FALSE) +
tm_shape(Europe, is.master = TRUE) +
tm_borders() +
tm_shape(rivers)+
tm_lines(lwd="strokelwd", scale=5, legend.lwd.show = FALSE)
# Añadir capa de burbujas, de tamaño proporcional a la población metropolitana
tm_shape(land) +
tm_raster("trees", breaks=seq(0, 100, by=20), legend.show = FALSE) +
tm_shape(Europe, is.master = TRUE) +
tm_borders() +
tm_shape(rivers)+
tm_lines(lwd="strokelwd", scale=5, legend.lwd.show = FALSE)+
tm_shape(metro)+
tm_bubbles("pop2010", "red", border.col = "black", border.lwd=1,
size.lim = c(0, 11e6), sizes.legend = c(1e6, 2e6, 4e6, 6e6, 10e6),
title.size="Metropolitan Population")
# Añadir capa de texto de nombres de metrópolis
tm_shape(land) +
tm_raster("trees", breaks=seq(0, 100, by=20), legend.show = FALSE) +
tm_shape(Europe, is.master = TRUE) +
tm_borders() +
tm_shape(rivers)+
tm_lines(lwd="strokelwd", scale=5, legend.lwd.show = FALSE)+
tm_shape(metro)+
tm_bubbles("pop2010", "red", border.col = "black", border.lwd=1,
size.lim = c(0, 11e6), sizes.legend = c(1e6, 2e6, 4e6, 6e6, 10e6),
title.size="Metropolitan Population")+
tm_text("name", size="pop2010", scale=1, root=4, size.lowerbound = .6,
bg.color="white", bg.alpha = .75,
auto.placement = 1, legend.size.show = FALSE)
# Añadir formato: available formats are: "World", "World_wide", "NLD", "NLD_wide"
tm_shape(land) +
tm_raster("trees", breaks=seq(0, 100, by=20), legend.show = FALSE) +
tm_shape(Europe, is.master = TRUE) +
tm_borders() +
tm_shape(rivers)+
tm_lines(lwd="strokelwd", scale=5, legend.lwd.show = FALSE)+
tm_shape(metro)+
tm_bubbles("pop2010", "red", border.col = "black", border.lwd=1,
size.lim = c(0, 11e6), sizes.legend = c(1e6, 2e6, 4e6, 6e6, 10e6),
title.size="Metropolitan Population")+
tm_text("name", size="pop2010", scale=1, root=4, size.lowerbound = .6,
bg.color="white", bg.alpha = .75,
auto.placement = 1, legend.size.show = FALSE)+
tm_format("World")
# estilo de representación (gama de colores)
tm_shape(land) +
tm_raster("trees", breaks=seq(0, 100, by=20), legend.show = FALSE) +
tm_shape(Europe, is.master = TRUE) +
tm_borders() +
tm_shape(rivers)+
tm_lines(lwd="strokelwd", scale=5, legend.lwd.show = FALSE)+
tm_shape(metro)+
tm_bubbles("pop2010", "red", border.col = "black", border.lwd=1,
size.lim = c(0, 11e6), sizes.legend = c(1e6, 2e6, 4e6, 6e6, 10e6),
title.size="Metropolitan Population")+
tm_text("name", size="pop2010", scale=1, root=4, size.lowerbound = .6,
bg.color="white", bg.alpha = .75,
auto.placement = 1, legend.size.show = FALSE)+
tm_format("World") +
tm_style("natural")
# obtain geocode address information
etse <- geocode_OSM('ETSE, Burjassot, Spain',  as.sf = TRUE)
# change to interactive mode
tmap_mode("view")
tm_shape(etse) +
tm_markers(text="query")
# obtain geocode address information
etse <- geocode_OSM('ETSE, Burjassot, Spain',  as.sf = TRUE)
# change to interactive mode
tmap_mode("view")
tm_shape(etse) +
tm_markers(text="query")
library(tmap)
tm_shape(countries_spdf) +
tm_fill("tm_polygons") +
tm_layout(frame = FALSE, background.color = "transparent")
tmap_mode('plot')
tm_shape(countries_spdf)
tm_shape(countries_spdf) +
tm_grid(n.x = 11, n.y = 11, projection = "+proj=longlat") +
tm_fill(col = "population", style = "quantile",alpha = 0.2)  +
tm_borders(col = "burlywood4")
tm_shape(countries_spdf)+tm_fill(col='region')
tm_shape(countries_spdf)+tm_fill(col='region')+tm_text('iso_a3',size=1)
tm_shape(countries_spdf)
tm_shape(countries_spdf)+tm_polygons()
tm_shape(countries_spdf)+tm_fill(col='region')+tm_text('iso_a3',size='AREA')
str(countries_spdf)
countries_spdf
tm_shape(countries_spdf)+tm_fill(col='region')+tm_text('iso_a3',size='population')
tm_shape(countries_spdf)+tm_fill(col='region')+tm_text('iso_a3',size='AREA')
tm_shape(countries_spdf)+tm_fill(col='region')+tm_text('iso_a3',size='population')
# Crear un mapa con la densidad de población como variable de color
tm_shape(countries_spdf) +
tm_fill(col = "density", style = "quantile") +
tm_text("iso_a3", size = "area_km2") +
tm_layout(frame = FALSE, background.color = "transparent")
library(tmap)
library(raster)
# Calcular el área de cada país en km^2
countries_spdf$area_km2 <- area(countries_spdf)/10^6
# Calcular la densidad de población
countries_spdf$density <- countries_spdf$POP_2021/countries_spdf$area_km2
library(tmap)
library(raster)
# Calcular el área de cada país en km^2
countries_spdf$area_km2 <- area(raster(countries_spdf))/10^6
countries_spdf$area_km2 <- area((countries_spdf))/10^6
View(countries_spdf)
# Calcular la densidad de población
countries_spdf$density <- countries_spdf$POP_2021/countries_spdf$area_km2
# Calcular la densidad de población
countries_spdf$dens <- countries_spdf$POP_2021/countries_spdf$area_km2
# Calcular la densidad de población
countries_spdf$density <- countries_spdf$POP_2021/countries_spdf$area_km2
library(tmap)
library(raster)
# Calcular el área de cada país en km^2
countries_spdf$area_km2 <- area(countries_spdf)/10^6
# Calcular la densidad de población
countries_spdf$density <- countries_spdf$population/countries_spdf$area_km2
# Crear un mapa con la densidad de población como variable de color
tm_shape(countries_spdf) +
tm_fill(col = "density", style = "quantile") +
tm_text("iso_a3", size = "area_km2") +
tm_layout(frame = FALSE, background.color = "transparent")
library(tmap)
library(raster)
# Calcular el área de cada país en km^2
countries_spdf$area_km2 <- area(countries_spdf)/10^6
# Calcular la densidad de población
countries_spdf$density <- countries_spdf$population/countries_spdf$area_km2
# Crear un mapa con la densidad de población como variable de color
tm_shape(countries_spdf) +
tm_fill(col = "density", style = "quantile") +
tm_text("iso_a3", size = "area_km2") +
tm_layout(frame = FALSE)
Europe_wo_russia <- Europe[Europe$name!='Russia',]
# Calcular el área de cada país en km^2
Europe_wo_russia$area_km2 <- area(Europe_wo_russia)/10^6
Europe_wo_russia <- countries_spdf[countries_spdf$name!='Russia',]
# Calcular el área de cada país en km^2
Europe_wo_russia$area_km2 <- area(Europe_wo_russia)/10^6
# Calcular la densidad de población
Europe_wo_russia$density <- Europe_wo_russia$population/Europe_wo_russia$area_km2
# Crear un mapa con la densidad de población como variable de color
tm_shape(Europe_wo_russia) +
tm_fill(col = "density", style = "quantile") +
tm_text("iso_a3", size = "area_km2") +
tm_layout(frame = FALSE)
Europe_wo_russia <- countries_spdf[countries_spdf$name!='Russia' & countries_spdf$region=='Europe',]
# Calcular el área de cada país en km^2
Europe_wo_russia$area_km2 <- area(Europe_wo_russia)/10^6
# Calcular la densidad de población
Europe_wo_russia$density <- Europe_wo_russia$population/Europe_wo_russia$area_km2
# Crear un mapa con la densidad de población como variable de color
tm_shape(Europe_wo_russia) +
tm_fill(col = "density", style = "quantile") +
tm_text("iso_a3", size = "area_km2") +
tm_layout(frame = FALSE)
Europe_wo_russia <- countries_spdf[countries_spdf$name!='Russia' & countries_spdf$region=='Europe',]
# Calcular el área de cada país en km^2
Europe_wo_russia$area_km2 <- area(Europe_wo_russia)/10^6
# Calcular la densidad de población
Europe_wo_russia$density <- Europe_wo_russia$population/Europe_wo_russia$area_km2
# Crear un mapa con la densidad de población como variable de color
tm_shape(Europe_wo_russia) +
tm_fill(col = "density") +
tm_text("iso_a3", size = "area_km2") +
tm_layout(frame = FALSE)
tm_shape(Europe_wo_russia) +
tm_fill(col = "density", style = "quantile") +
tm_text("iso_a3", size = "area_km2") +
tm_layout(frame = FALSE)
tm_save('Europa_sin_Rusia.png')
tm_shape(Europe_wo_russia) +
tm_fill(col = "density", style = "quantile") +
tm_text("iso_a3", size = "area_km2") +
tm_layout(frame = FALSE)
tm_save('Europa_sin_Rusia.png')
tmap_save('Europa_sin_Rusia.png')
tm_shape(Europe_wo_russia) +
tm_fill(col = "density", style = "quantile") +
tm_text("iso_a3", size = "area_km2") +
tm_layout(frame = FALSE)
tmap_save('Europa_sin_Rusia.png')
```{r}
tmap_save(filename = 'Europa_sin_Rusia.png')
## Global code options
knitr::opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
# Especificamos las librerías necesarias en esta lista
packages = c("maps","ggmap","leaflet","rgdal","rgeos","maptools","tidyverse","tmap","devtools","formatR","tmaptools","caret",'mapview','cartography','raster','rasterVis')
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE,repos='http://cran.rediris.es')
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
library(ggmap)
library(rgdal)
library(rgeos)
library(maptools)
library(dplyr)
library(tidyr)
library(tmap)
library(geospatial) # Instalado en los programas del día
library(sp)
library(maps)
library(raster)
library(tmaptools)
library(leaflet)
library(sp)
library(raster)
library(tmap)
str(pop,max.level = 2)
print(pop) # es equivalente a escribir una variable por consola
summary(pop)
plot(pop)#heatmap
LondonSport<-readOGR(dsn='./data/Mapas',layer='london_sport')
str(LondonSport, max.level=2)
#Borro los ficheros generados en posibles ejecuciones anteriores del código
borrar<-list.files(path='./data/Mapas',pattern = 'LondonSport2.*')
file.remove(paste0('./data/Mapas/',borrar)) # si existe lo borro
rgdal::writeOGR(obj=LondonSport,dsn = "./data/Mapas", layer = "LondonSport2",  driver = "ESRI Shapefile")
str(LondonSport,max.level = 2)
#Representación genérica
plot(LondonSport)
#Representación con tmaps
tm_shape(LondonSport)+tm_borders()+tm_fill("Partic_Per",alpha=0.5)
tm_shape(LondonSport)+tm_borders()+tm_fill("Partic_Per",style="quantile")
SpainRegions <- getData('GADM', country='ESP', level=4)
Alicante <- SpainRegions[SpainRegions$NAME_1=='Alicante',]
tm_shape(Alicante)+tm_fill("NAME_4")
Alicante <- SpainRegions[SpainRegions$NAME_1=='Alicante',]
tm_shape(Alicante)+tm_fill("NAME_4")
Alicante <- SpainRegions[SpainRegions$NAME_1=='Alicante',]
tm_shape(Alicante)+tm_fill("NAME_2")
Alicante <- SpainRegions[SpainRegions$NAME_0=='Alicante',]
tm_shape(Alicante)+tm_fill("NAME_2")
Alicante <- SpainRegions[SpainRegions$NAME_3=='Alicante',]
tm_shape(Alicante)+tm_fill("NAME_2")
View(SpainRegions)
Alicante <- SpainRegions[SpainRegions$NAME_2=='Alicante',]
tm_shape(Alicante)+tm_fill("NAME_2")
Alicante <- SpainRegions[SpainRegions$NAME_2=='Alicante',]
tm_shape(Alicante)+tm_fill("NAME_4")
tm_shape(Alicante)+tm_fill("NAME_4",popup.vars = True)
tm_shape(Alicante)+tm_fill("NAME_4",popup.vars = TRUE)
tm_shape(Alicante)+tm_fill("NAME_4",popup.vars = c(Localidad='NAME_4',Provincia='NAME_3',Comunidad='NAME_2',País='NAME_0'))
tmap_mode('view')
Alicante <- SpainRegions[SpainRegions$NAME_2=='Alicante',]
tm_shape(Alicante)+tm_fill("NAME_4",popup.vars = c(Localidad='NAME_4',Provincia='NAME_3',Comunidad='NAME_2',País='NAME_0'))
tmap_save('Mapa_alicante.html')
tmap_save(filename='Mapa_alicante.html')
#######Preparación fichero del censo hasta 2016 por provincias.
library(readr)
PoblacionSpain <- read_delim("./data/PoblacionSpain.csv",
"\t", escape_double = FALSE)
colnames(PoblacionSpain)[1]<-"Provincia"
PoblacionSpain[-1]<-lapply(PoblacionSpain[-1],as.numeric)
save(PoblacionSpain,file="./data/PoblacionSpain.RData")
#######fin Preparación fichero del censo hasta 2016 por provincias
load(file="./data/PoblacionSpain.RData")
colnames(PoblacionSpain)
