plotOutput("GrafVars"))
)),
tabPanel("Registros de la máquina",
sidebarLayout(
sidebarPanel(h5("ALARMAS checkbox"),
uiOutput("SelAl")
),
mainPanel("Registros de la máquina seleccionada",
dataTableOutput('tbl')
)
))
),
tabPanel("Estadísticas Globales Temporales",
sidebarLayout(
sidebarPanel(h5("PERIODO Y ESTADÍSTICAS"),
dateRangeInput("rangFech", "Selecciona el periodo", start = "2016-01-01", end = "2016-12-31", format = "yyyy-mm-dd", separator= "a"),
h5("HISTOGRAMA"),
uiOutput("SelAl2"),
sliderInput("slider1", "Ancho del bin del histograma",
min= 1, max = 50, value = 20, step= 1),
h5("BOXPLOT"),
checkboxInput("checkTodasAlarm", "Todas las máquinas", value = FALSE, width = NULL)
),
mainPanel("Histograma de la alarma seleccionada",
plotOutput("Histo"),
"Boxplot de la alarma seleccionada",
plotOutput("BoxPlt"))
))
)
server <- function(input, output) {
Datos<-reactive({
a<-input$DatosFichero
req(a)
nombre_df<-load(a$datapath)
Datos<-eval(parse(text=nombre_df))
return(Datos)
})
output$Buttons <- renderUI({
tagList(selectInput("SelectMaq", "Selecciona máquina", unique(Datos()[['matricula']])))
})
output$AlarmRadio <- renderUI({
radioButtons("selectAlarm", "Selecciona la alarma a visualizar",
names(Datos())[4:48])
})
output$SelAl <- renderUI({
checkboxGroupInput("checkAlarms", "Selecciona las alarmas para ver en la tabla", names(Datos())[4:48])
})
output$SelAl2<-renderUI({
selectInput("SelectAlarm2", "Alarma", names(Datos())[4:48])
})
output$tbl <- renderDataTable(Datos()[c("matricula", "dia", input$checkAlarms,"p_orden")])
output$GrafOrden <- renderPlot({
data <- Datos() %>% dplyr::filter(matricula == input$SelectMaq)
data %>% ggplot(aes(x = dia, y = p_orden, color = p_orden)) +
geom_line()+geom_point() + xlab('Dia') + ylab('p_orden')
})
output$GrafVars <- renderPlot({
data <- Datos() %>% dplyr::filter(matricula == input$SelectMaq)
data %>% ggplot(aes_string(x = 'dia', y = input$selectAlarm)) +
geom_line()+ geom_point() + xlab('Dia') + ylab(input$selectAlarm)
})
output$Histo <- renderPlot({
dats<-filter(Datos(), matricula == input$SelectMaq)
dats2<-filter(dats, dia>=input$rangFech[1] & dia<input$rangFech[2])
dats2 %>% ggplot(aes_string(x = input$SelectAlarm2)) +
geom_histogram(binwidth = input$slider1) + xlab(input$SelectAlarm2) + ylab("count")
})
output$BoxPlt <- renderPlot({
if(input$checkTodasAlarm == FALSE){
dats <- filter(Datos(), matricula == input$SelectMaq)
dats2<-filter(dats, dia>=input$rangFech[1] & dia<input$rangFech[2])
dats2 %>% ggplot(aes_string(x = "matricula", y = input$SelectAlarm2)) +
geom_boxplot() +
labs(x = "factor(matrícula)", y = "eval(ALA)")
}else{
dats<-filter(Datos(), dia>=input$rangFech[1] & dia<input$rangFech[2])
y <- dats[,input$SelectAlarm2]
dats %>% ggplot(aes(x = factor(matricula), y = y)) +
geom_boxplot() +
labs(x = "factor(matrícula)", y = "eval(ALA)")
}
})
}
shinyApp(ui, server)
library(shiny)
library(rsconnect)
library(shinythemes)
library(dplyr)
library(ggplot2)
ui<-navbarPage(theme = shinytheme("darkly"),
"App Máster Ciencia de datos ",
tabPanel("Selección de máquina",
sidebarLayout(
sidebarPanel(h5("MÁQUINA"),
fileInput("DatosFichero", "Selecciona un fichero", accept = NULL),
uiOutput('Buttons')
),
mainPanel("Probabilidad de orden",
plotOutput("GrafOrden"))
)),
navbarMenu("Estado de la máquina",
tabPanel("Evolución temporal alarmas",
sidebarLayout(
sidebarPanel(h5("ALARMAS radiobuttons"),
uiOutput("AlarmRadio")
),
mainPanel("Evolución temporal Alarmas",
plotOutput("GrafVars"))
)),
tabPanel("Registros de la máquina",
sidebarLayout(
sidebarPanel(h5("ALARMAS checkbox"),
uiOutput("SelAl")
),
mainPanel("Registros de la máquina seleccionada",
dataTableOutput('tbl')
)
))
),
tabPanel("Estadísticas Globales Temporales",
sidebarLayout(
sidebarPanel(h5("PERIODO Y ESTADÍSTICAS"),
dateRangeInput("rangFech", "Selecciona el periodo", start = "2016-01-01", end = "2016-12-31", format = "yyyy-mm-dd", separator= "a"),
h5("HISTOGRAMA"),
uiOutput("SelAl2"),
sliderInput("slider1", "Ancho del bin del histograma",
min= 1, max = 50, value = 20, step= 1),
h5("BOXPLOT"),
checkboxInput("checkTodasAlarm", "Todas las máquinas", value = FALSE, width = NULL)
),
mainPanel("Histograma de la alarma seleccionada",
plotOutput("Histo"),
"Boxplot de la alarma seleccionada",
plotOutput("BoxPlt"))
))
)
server <- function(input, output) {
Datos<-reactive({
a<-input$DatosFichero
req(a)
nombre_df<-load(a$datapath)
Datos<-eval(parse(text=nombre_df))
return(Datos)
})
output$Buttons <- renderUI({
tagList(selectInput("SelectMaq", "Selecciona máquina", unique(Datos()[['matricula']])))
})
output$AlarmRadio <- renderUI({
radioButtons("selectAlarm", "Selecciona la alarma a visualizar",
names(Datos())[4:48])
})
output$SelAl <- renderUI({
checkboxGroupInput("checkAlarms", "Selecciona las alarmas para ver en la tabla", names(Datos())[4:48])
})
output$SelAl2<-renderUI({
selectInput("SelectAlarm2", "Alarma", names(Datos())[4:48])
})
output$tbl <- renderDataTable(Datos()[c("matricula", "dia", input$checkAlarms,"p_orden")])
output$GrafOrden <- renderPlot({
data <- Datos() %>% dplyr::filter(matricula == input$SelectMaq)
data %>% ggplot(aes(x = dia, y = p_orden, color = p_orden)) +
geom_line()+geom_point() + xlab('Dia') + ylab('p_orden')
})
output$GrafVars <- renderPlot({
data <- Datos() %>% dplyr::filter(matricula == input$SelectMaq)
data %>% ggplot(aes_string(x = 'dia', y = input$selectAlarm)) +
geom_line()+ geom_point() + xlab('Dia') + ylab(input$selectAlarm)
})
output$Histo <- renderPlot({
dats<-filter(Datos(), matricula == input$SelectMaq)
dats2<-filter(dats, dia>=input$rangFech[1] & dia<input$rangFech[2])
dats2 %>% ggplot(aes_string(x = input$SelectAlarm2)) +
geom_histogram(binwidth = input$slider1) + xlab(input$SelectAlarm2) + ylab("count")
})
output$BoxPlt <- renderPlot({
if(input$checkTodasAlarm == FALSE){
dats <- filter(Datos(), matricula == input$SelectMaq)
dats2<-filter(dats, dia>=input$rangFech[1] & dia<input$rangFech[2])
dats2 %>% ggplot(aes_string(x = "matricula", y = input$SelectAlarm2)) +
geom_boxplot() +
labs(x = "factor(matrícula)", y = "eval(ALA)")
}else{
dats<-filter(Datos(), dia>=input$rangFech[1] & dia<input$rangFech[2])
y <- dats[,input$SelectAlarm2]
dats %>% ggplot(aes(x = factor(matricula), y = y)) +
geom_boxplot() +
labs(x = "factor(matrícula)", y = "eval(ALA)")
}
})
}
shinyApp(ui, server)
library(shiny)
library(rsconnect)
library(shinythemes)
library(dplyr)
library(ggplot2)
ui<-navbarPage(theme = shinytheme("darkly"),
"App Máster Ciencia de datos ",
tabPanel("Selección de máquina",
sidebarLayout(
sidebarPanel(h5("MÁQUINA"),
fileInput("DatosFichero", "Selecciona un fichero", accept = NULL),
uiOutput('Buttons')
),
mainPanel("Probabilidad de orden",
plotOutput("GrafOrden"))
)),
navbarMenu("Estado de la máquina",
tabPanel("Evolución temporal alarmas",
sidebarLayout(
sidebarPanel(h5("ALARMAS radiobuttons"),
uiOutput("AlarmRadio")
),
mainPanel("Evolución temporal Alarmas",
plotOutput("GrafVars"))
)),
tabPanel("Registros de la máquina",
sidebarLayout(
sidebarPanel(h5("ALARMAS checkbox"),
uiOutput("SelAl")
),
mainPanel("Registros de la máquina seleccionada",
dataTableOutput('tbl')
)
))
),
tabPanel("Estadísticas Globales Temporales",
sidebarLayout(
sidebarPanel(h5("PERIODO Y ESTADÍSTICAS"),
dateRangeInput("rangFech", "Selecciona el periodo", start = "2016-01-01", end = "2016-12-31", format = "yyyy-mm-dd", separator= "a"),
h5("HISTOGRAMA"),
uiOutput("SelAl2"),
sliderInput("slider1", "Ancho del bin del histograma",
min= 1, max = 50, value = 20, step= 1),
h5("BOXPLOT"),
checkboxInput("checkTodasAlarm", "Todas las máquinas", value = FALSE, width = NULL)
),
mainPanel("Histograma de la alarma seleccionada",
plotOutput("Histo"),
"Boxplot de la alarma seleccionada",
plotOutput("BoxPlt"))
))
)
server <- function(input, output) {
Datos<-reactive({
a<-input$DatosFichero
req(a)
nombre_df<-load(a$datapath)
Datos<-eval(parse(text=nombre_df))
return(Datos)
})
output$Buttons <- renderUI({
tagList(selectInput("SelectMaq", "Selecciona máquina", unique(Datos()[['matricula']])))
})
output$AlarmRadio <- renderUI({
radioButtons("selectAlarm", "Selecciona la alarma a visualizar",
names(Datos())[4:48])
})
output$SelAl <- renderUI({
checkboxGroupInput("checkAlarms", "Selecciona las alarmas para ver en la tabla", names(Datos())[4:48])
})
output$SelAl2<-renderUI({
selectInput("SelectAlarm2", "Alarma", names(Datos())[4:48])
})
output$tbl <- renderDataTable(Datos()[c("matricula", "dia", input$checkAlarms,"p_orden")])
output$GrafOrden <- renderPlot({
data <- Datos() %>% dplyr::filter(matricula == input$SelectMaq)
data %>% ggplot(aes(x = dia, y = p_orden, color = p_orden)) +
geom_line()+geom_point() + xlab('Dia') + ylab('p_orden')
})
output$GrafVars <- renderPlot({
data <- Datos() %>% dplyr::filter(matricula == input$SelectMaq)
data %>% ggplot(aes_string(x = 'dia', y = input$selectAlarm)) +
geom_line()+ geom_point() + xlab('Dia') + ylab(input$selectAlarm)
})
output$Histo <- renderPlot({
dats<-filter(Datos(), matricula == input$SelectMaq)
dats2<-filter(dats, dia>=input$rangFech[1] & dia<input$rangFech[2])
dats2 %>% ggplot(aes_string(x = input$SelectAlarm2)) +
geom_histogram(binwidth = input$slider1) + xlab(input$SelectAlarm2) + ylab("count")
})
output$BoxPlt <- renderPlot({
if(input$checkTodasAlarm == FALSE){
dats <- filter(Datos(), matricula == input$SelectMaq)
dats2<-filter(dats, dia>=input$rangFech[1] & dia<input$rangFech[2])
dats2 %>% ggplot(aes_string(x = "matricula", y = input$SelectAlarm2)) +
geom_boxplot() +
labs(x = "factor(matrícula)", y = "eval(ALA)")
}else{
dats<-filter(Datos(), dia>=input$rangFech[1] & dia<input$rangFech[2])
y <- dats[,input$SelectAlarm2]
dats %>% ggplot(aes(x = factor(matricula), y = y)) +
geom_boxplot() +
labs(x = "factor(matrícula)", y = "eval(ALA)")
}
})
}
shinyApp(ui, server)
library(shiny)
library(rsconnect)
library(shinythemes)
library(dplyr)
library(ggplot2)
ui<-navbarPage(theme = shinytheme("darkly"),
"App Máster Ciencia de datos ",
tabPanel("Selección de máquina",
sidebarLayout(
sidebarPanel(h5("MÁQUINA"),
fileInput("DatosFichero", "Selecciona un fichero", accept = NULL),
uiOutput('Buttons')
),
mainPanel("Probabilidad de orden",
plotOutput("GrafOrden"))
)),
navbarMenu("Estado de la máquina",
tabPanel("Evolución temporal alarmas",
sidebarLayout(
sidebarPanel(h5("ALARMAS radiobuttons"),
uiOutput("AlarmRadio")
),
mainPanel("Evolución temporal Alarmas",
plotOutput("GrafVars"))
)),
tabPanel("Registros de la máquina",
sidebarLayout(
sidebarPanel(h5("ALARMAS checkbox"),
uiOutput("SelAl")
),
mainPanel("Registros de la máquina seleccionada",
dataTableOutput('tbl')
)
))
),
tabPanel("Estadísticas Globales Temporales",
sidebarLayout(
sidebarPanel(h5("PERIODO Y ESTADÍSTICAS"),
dateRangeInput("rangFech", "Selecciona el periodo", start = "2016-01-01", end = "2016-12-31", format = "yyyy-mm-dd", separator= "a"),
h5("HISTOGRAMA"),
uiOutput("SelAl2"),
sliderInput("slider1", "Ancho del bin del histograma",
min= 1, max = 50, value = 20, step= 1),
h5("BOXPLOT"),
checkboxInput("checkTodasAlarm", "Todas las máquinas", value = FALSE, width = NULL)
),
mainPanel("Histograma de la alarma seleccionada",
plotOutput("Histo"),
"Boxplot de la alarma seleccionada",
plotOutput("BoxPlt"))
))
)
server <- function(input, output) {
Datos<-reactive({
a<-input$DatosFichero
req(a)
nombre_df<-load(a$datapath)
Datos<-eval(parse(text=nombre_df))
return(Datos)
})
output$Buttons <- renderUI({
tagList(selectInput("SelectMaq", "Selecciona máquina", unique(Datos()[['matricula']])))
})
output$AlarmRadio <- renderUI({
radioButtons("selectAlarm", "Selecciona la alarma a visualizar",
names(Datos())[4:48])
})
output$SelAl <- renderUI({
checkboxGroupInput("checkAlarms", "Selecciona las alarmas para ver en la tabla", names(Datos())[4:48])
})
output$SelAl2<-renderUI({
selectInput("SelectAlarm2", "Alarma", names(Datos())[4:48])
})
output$tbl <- renderDataTable(Datos()[c("matricula", "dia", input$checkAlarms,"p_orden")])
output$GrafOrden <- renderPlot({
data <- Datos() %>% dplyr::filter(matricula == input$SelectMaq)
data %>% ggplot(aes(x = dia, y = p_orden, color = p_orden)) +
geom_line()+geom_point() + xlab('Dia') + ylab('p_orden')
})
output$GrafVars <- renderPlot({
data <- Datos() %>% dplyr::filter(matricula == input$SelectMaq)
data %>% ggplot(aes_string(x = 'dia', y = input$selectAlarm)) +
geom_line()+ geom_point() + xlab('Dia') + ylab(input$selectAlarm)
})
output$Histo <- renderPlot({
dats<-filter(Datos(), matricula == input$SelectMaq)
dats2<-filter(dats, dia>=input$rangFech[1] & dia<input$rangFech[2])
dats2 %>% ggplot(aes_string(x = input$SelectAlarm2)) +
geom_histogram(binwidth = input$slider1) + xlab(input$SelectAlarm2) + ylab("count")
})
output$BoxPlt <- renderPlot({
if(input$checkTodasAlarm == FALSE){
dats <- filter(Datos(), matricula == input$SelectMaq)
dats2<-filter(dats, dia>=input$rangFech[1] & dia<input$rangFech[2])
dats2 %>% ggplot(aes_string(x = "matricula", y = input$SelectAlarm2)) +
geom_boxplot() +
labs(x = "factor(matrícula)", y = "eval(ALA)")
}else{
dats<-filter(Datos(), dia>=input$rangFech[1] & dia<input$rangFech[2])
y <- dats[,input$SelectAlarm2]
dats %>% ggplot(aes(x = factor(matricula), y = y)) +
geom_boxplot() +
labs(x = "factor(matrícula)", y = "eval(ALA)")
}
})
}
shinyApp(ui, server)
library(shiny)
library(rsconnect)
library(shinythemes)
library(dplyr)
library(ggplot2)
ui<-navbarPage(theme = shinytheme("darkly"),
"App Máster Ciencia de datos ",
tabPanel("Selección de máquina",
sidebarLayout(
sidebarPanel(h5("MÁQUINA"),
fileInput("DatosFichero", "Selecciona un fichero", accept = NULL),
uiOutput('Buttons')
),
mainPanel("Probabilidad de orden",
plotOutput("GrafOrden"))
)),
navbarMenu("Estado de la máquina",
tabPanel("Evolución temporal alarmas",
sidebarLayout(
sidebarPanel(h5("ALARMAS radiobuttons"),
uiOutput("AlarmRadio")
),
mainPanel("Evolución temporal Alarmas",
plotOutput("GrafVars"))
)),
tabPanel("Registros de la máquina",
sidebarLayout(
sidebarPanel(h5("ALARMAS checkbox"),
uiOutput("SelAl")
),
mainPanel("Registros de la máquina seleccionada",
dataTableOutput('tbl')
)
))
),
tabPanel("Estadísticas Globales Temporales",
sidebarLayout(
sidebarPanel(h5("PERIODO Y ESTADÍSTICAS"),
dateRangeInput("rangFech", "Selecciona el periodo", start = "2016-01-01", end = "2016-12-31", format = "yyyy-mm-dd", separator= "a"),
h5("HISTOGRAMA"),
uiOutput("SelAl2"),
sliderInput("slider1", "Ancho del bin del histograma",
min= 1, max = 50, value = 20, step= 1),
h5("BOXPLOT"),
checkboxInput("checkTodasAlarm", "Todas las máquinas", value = FALSE, width = NULL)
),
mainPanel("Histograma de la alarma seleccionada",
plotOutput("Histo"),
"Boxplot de la alarma seleccionada",
plotOutput("BoxPlt"))
))
)
server <- function(input, output) {
Datos<-reactive({
a<-input$DatosFichero
req(a)
nombre_df<-load(a$datapath)
Datos<-eval(parse(text=nombre_df))
return(Datos)
})
output$Buttons <- renderUI({
tagList(selectInput("SelectMaq", "Selecciona máquina", unique(Datos()[['matricula']])))
})
output$AlarmRadio <- renderUI({
radioButtons("selectAlarm", "Selecciona la alarma a visualizar",
names(Datos())[4:48])
})
output$SelAl <- renderUI({
checkboxGroupInput("checkAlarms", "Selecciona las alarmas para ver en la tabla", names(Datos())[4:48])
})
output$SelAl2<-renderUI({
selectInput("SelectAlarm2", "Alarma", names(Datos())[4:48])
})
output$tbl <- renderDataTable(Datos()[c("matricula", "dia", input$checkAlarms,"p_orden")])
output$GrafOrden <- renderPlot({
data <- Datos() %>% dplyr::filter(matricula == input$SelectMaq)
data %>% ggplot(aes(x = dia, y = p_orden, color = p_orden)) +
geom_line()+geom_point() + xlab('Dia') + ylab('p_orden')
})
output$GrafVars <- renderPlot({
data <- Datos() %>% dplyr::filter(matricula == input$SelectMaq)
data %>% ggplot(aes_string(x = 'dia', y = input$selectAlarm)) +
geom_line()+ geom_point() + xlab('Dia') + ylab(input$selectAlarm)
})
output$Histo <- renderPlot({
dats<-filter(Datos(), matricula == input$SelectMaq)
dats2<-filter(dats, dia>=input$rangFech[1] & dia<input$rangFech[2])
dats2 %>% ggplot(aes_string(x = input$SelectAlarm2)) +
geom_histogram(binwidth = input$slider1) + xlab(input$SelectAlarm2) + ylab("count")
})
output$BoxPlt <- renderPlot({
if(input$checkTodasAlarm == FALSE){
dats <- filter(Datos(), matricula == input$SelectMaq)
dats2<-filter(dats, dia>=input$rangFech[1] & dia<input$rangFech[2])
dats2 %>% ggplot(aes_string(x = "matricula", y = input$SelectAlarm2)) +
geom_boxplot() +
labs(x = "factor(matrícula)", y = "eval(ALA)")
}else{
dats<-filter(Datos(), dia>=input$rangFech[1] & dia<input$rangFech[2])
y <- dats[,input$SelectAlarm2]
dats %>% ggplot(aes(x = factor(matricula), y = y)) +
geom_boxplot() +
labs(x = "factor(matrícula)", y = "eval(ALA)")
}
})
}
shinyApp(ui, server)
